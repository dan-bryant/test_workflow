# filename: .github/workflows/bld_cmd_ci_py3129_vs22_x64_dbg.yml
name: Bld cmd,ci,py3129,vs22,x64,dbg

on:
  workflow_dispatch: # Allows the workflow to be triggered manually

jobs:
  build:
    # Use the Windows Server 2022 runner
    runs-on: windows-2022
    # https://docs.github.com/en/actions/writing-workflows/choosing-what-your-workflow-does/accessing-contextual-information-about-workflow-runs
    env:
      GH_WORKSPACE: ${{ github.workspace }}
      IASL_PREFIX: C:\ProgramData\chocolatey\bin\
      CLANG_BIN: C:\Program Files\LLVM\bin\
      NASM_PREFIX: C:\Program Files\NASM\
      PYTHON_COMMAND: D:\Python312\python.exe
      PYTHON_PATH: D:\Python312
      PYTHON_VERSION: 3.12.9
      PYTHON_SETUP: python-3.12.9-amd64.exe
      STUART: D:\Python312\Scripts\stuart
      GITHUB_REPOSITORY_URL: ${{ github.server_url }}/${{ github.repository }}      
      REPO_PATH: D:\
      EDK2_PATH: D:\Edk2
      ARTIFACT_PATH: D:\artifact
      EMU_HOST: WinHost
      CHAIN: VS2022
      ARCH: X64
      TRGT: DEBUG
    defaults:
      run:
        shell: cmd
    steps:
      # - name: Clone Repo
      #   run: git clone https://github.com/tianocore/edk2.git %EDK2_PATH%

      - name: Clone Repo
        run: git clone --recurse-submodules --depth 1 --shallow-submodules %GITHUB_REPOSITORY_URL% %REPO_PATH%

      # - name: Checkout Repository recursively with long-files
      #   uses: actions/checkout@v4
      #   with:
      #     submodules: recursive     # Initialize and update submodules
      #     long-paths: true          # Enable long path support

      # - name: Install NASM
      #   run: choco install nasm -y

      # - name: Install IASL
      #   run: choco install iasl -y

      # - name: Find IASL
      #   run: dir /s/b "%IASL_PREFIX%\iasl.exe"

      # - name: Find CLANG
      #   run: dir /s/b "%CLANG_BIN%\clang.exe"

      # - name: Find NASM
      #   run: dir /s/b "%NASM_PREFIX%\nasm.exe"

      # - name: Break
      #   run: |
      #     dir this_file_does_not_exist.txt

      - name: Install Python 3.12.9, NASM, IASL
        run: |
          curl -o ${{ github.workspace }}\%PYTHON_SETUP% https://www.python.org/ftp/python/%PYTHON_VERSION%/%PYTHON_SETUP%
          ${{ github.workspace }}\%PYTHON_SETUP% /quiet TargetDir=%PYTHON_PATH%
          choco install nasm iasl -y

      - name: Install Pip Requirements
        run: |
          %PYTHON_COMMAND% -m pip install --upgrade pip
          %PYTHON_COMMAND% -m pip install -r "%EDK2_PATH%\pip-requirements.txt"

      - name: Build BaseTools
        run: |
          pushd "%EDK2_PATH%"
          call edksetup.bat Reconfig %CHAIN%
          %PYTHON_COMMAND% BaseTools\Edk2ToolsBuild.py -t %CHAIN%

      - name: Setup and update Build_All
        run: |
          pushd "%EDK2_PATH%"
          call edksetup.bat Reconfig %CHAIN%
          %STUART%_setup -c .pytool\CISettings.py -a %ARCH% -t %TRGT% TOOL_CHAIN_TAG=%CHAIN%
          %STUART%_update -c .pytool\CISettings.py -a %ARCH% -t %TRGT% TOOL_CHAIN_TAG=%CHAIN%

      # - name: Build Build_All
      #   # Compiler #2065: EmbeddedPkg\...\VirtualRealTimeClockLib.c(89): 'BUILD_EPOCH': undeclared
      #   continue-on-error: true
      #   run: |
      #     pushd "%EDK2_PATH%"
      #     call edksetup.bat Reconfig %CHAIN%
      #     %STUART%_ci_build -c .pytool\CISettings.py -a %ARCH% -t %TRGT% TOOL_CHAIN_TAG=%CHAIN%

      - name: Setup and update EmulatorPkg
        run: |
          pushd "%EDK2_PATH%"
          call edksetup.bat Reconfig %CHAIN%
          %STUART%_setup -c EmulatorPkg\PlatformCI\PlatformBuild.py -a %ARCH% -t %TRGT% TOOL_CHAIN_TAG=%CHAIN%
          %STUART%_update -c EmulatorPkg\PlatformCI\PlatformBuild.py -a %ARCH% -t %TRGT% TOOL_CHAIN_TAG=%CHAIN%

      - name: Build EmulatorPkg
        run: |
          pushd "%EDK2_PATH%"
          call edksetup.bat Reconfig %CHAIN%
          %STUART%_build -c EmulatorPkg\PlatformCI\PlatformBuild.py -a %ARCH% TOOL_CHAIN_TAG=%CHAIN% TARGET=%TRGT%

      - name: Setup and update OvmfPkg
        run: |
          pushd "%EDK2_PATH%"
          call edksetup.bat Reconfig %CHAIN%
          %STUART%_setup -c OvmfPkg\PlatformCI\PlatformBuild.py -a %ARCH% -t %TRGT% TOOL_CHAIN_TAG=%CHAIN%
          %STUART%_update -c OvmfPkg\PlatformCI\PlatformBuild.py -a %ARCH% -t %TRGT% TOOL_CHAIN_TAG=%CHAIN%

      - name: Build OvmfPkg
        run: |
          pushd "%EDK2_PATH%"
          call edksetup.bat Reconfig %CHAIN%
          %STUART%_build -c OvmfPkg\PlatformCI\PlatformBuild.py -a %ARCH% TOOL_CHAIN_TAG=%CHAIN% TARGET=%TRGT%

      - name: Gather VS Environment Data
        run: |
          pushd "%EDK2_PATH%"
          call edksetup.bat Reconfig %CHAIN%
          pushd "%CD%\Build"
          set > vmInfoEnvVars.txt
          vswhere -format json > vmInfoVswhere.json
          jq -r ".[0].installationPath" vmInfoVswhere.json > vmInfoVsInstallPath.txt
          for /f "delims=;" %p in (vmInfoVsInstallPath.txt) do (
            echo.| vs_installer.exe export --quiet --installPath "%p" --config vmInfoVsConfig.json
          )

      - name: Package Build Outputs
        # Robocopy will likely throw an error on one of these, so ignore and continue
        continue-on-error: true
        run: |
          pushd "%EDK2_PATH%\Build"
          for /d %p in (. *) do (
            robocopy %CD%\%p\vmInfo* "%ARTIFACT_PATH%\%p"
            robocopy %CD%\%p\BUILDLOG*.txt "%ARTIFACT_PATH%\%p"
            robocopy %CD%\%p\*LOG.txt "%ARTIFACT_PATH%\%p"
            robocopy %CD%\%p\All\%DEBUG%_%VS2022%\%ARCH%\*.efi "%ARTIFACT_PATH%\%p\All\%DEBUG%_%VS2022%\%ARCH%"
            robocopy %CD%\%p\%DEBUG%_%VS2022%\%ARCH%\*.efi "%ARTIFACT_PATH%\%p\%DEBUG%_%VS2022%\%ARCH%"
            robocopy %CD%\%p\%DEBUG%_%VS2022%\%ARCH%\%EMU_HOST%* "%ARTIFACT_PATH%\%p\%DEBUG%_%VS2022%\%ARCH%"
            robocopy %CD%\%p\%DEBUG%_%VS2022%\FV\* "%ARTIFACT_PATH%\%p\%DEBUG%_%VS2022%\FV"
          )

      - name: Upload Artifact
        uses: actions/upload-artifact@v4
        with:
          name: build-artifact
          path: ${{ env.ARTIFACT_PATH }}\**\*

