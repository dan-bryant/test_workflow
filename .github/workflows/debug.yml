# filename: .github/workflows/bld_cmd_ci.yml
name: Debug CI
run-name: >-
  debug-vs${{ github.event.inputs.vs_year
    }}-${{ github.event.inputs.architecture
    }}-${{ github.event.inputs.target
    }}-Py_${{ github.event.inputs.python_version
    }}-Hack_${{ github.event.inputs.hack }}

on:
  workflow_dispatch:  # Allows the workflow to be triggered manually
    inputs:
      hack:
        description: "Enable HACK mode"
        required: false
        default: "false"
      build:
        description: "Pkg ( ie. EmulatorPkg, OvmfPkg, Edk2, All )"
        required: false
        default: "OvmfPkg"
      vs_year:
        description: "Visual Studio Year ( 22 | 19 )"
        required: false
        default: "19"
      target:
        description: "Build target (DEBUG | RELEASE)"
        required: false
        default: "DEBUG"
      architecture:
        description: "Build architecture (X64 | IA32 )"
        required: false
        default: "X64"
      python_version:
        description: "Python version to use"
        required: false
        default: "3.12.9"

jobs:
  build:
    # Use the Windows Server 2022 runner
    runs-on: windows-20${{ github.event.inputs.vs_year }}
    # https://docs.github.com/en/actions/writing-workflows
    #  /choosing-what-your-workflow-does
    #  /accessing-contextual-information-about-workflow-runs
    env:
      GH_WORKSPACE: ${{ github.workspace }}
      GH_HEAD_SHA: ${{ github.sha }}
      IASL_PREFIX: C:\ProgramData\chocolatey\bin\
      CLANG_BIN: C:\Program Files\LLVM\bin\
      NASM_PREFIX: C:\Program Files\NASM\
      PYTHON_COMMAND: python.exe
      PYTHON_PATH: D:\Python${{ github.event.inputs.python_version }}
      PYTHON_VERSION: ${{ github.event.inputs.python_version }}
      PYTHON_SETUP: python-${{ github.event.inputs.python_version }}-amd64.exe
      STUART: D:\Python${{ github.event.inputs.python_version }}\Scripts\stuart
      GH_REPO_URL: ${{ github.server_url }}/${{ github.repository }}
      GH_WORKFLOW_NAME: ${{ github.workflow }}
      BUILD_BAT: mk_bat.py
      REPO_PATH: D:\r
      EDK2_PATH: D:\r\Edk2
      ARTIFACT_PATH: D:\artifact
      EMU_HOST: WinHost
      CHAIN: VS20${{ github.event.inputs.vs_year }}
      ARCH: ${{ github.event.inputs.architecture }}
      TRGT: ${{ github.event.inputs.target }}

    defaults:
      run:
        shell: cmd

    steps:
      # - name: Install Pip Requirements
      #   # if: ${{ github.event.inputs.hack != 'true' }}
      #   run: |
      #     %PYTHON_COMMAND% -m pip install --upgrade pip
      #     %PYTHON_COMMAND% -m pip install PyYAML

      - name: Extract artifact
        if: >-
          ${{ github.event.inputs.hack == 'true' }}
        run: |
          curl -Lo out.zip https://github.com/dan-bryant/test_workflow/releases/download/run_14297350911/artifact.zip
          python -m zipfile -e out.zip %ARTIFACT_PATH%
          set VOLUME=%ARTIFACT_PATH%\Emulator%ARCH%\%TRGT%_%CHAIN%\%ARCH%\%EMU_HOST%
          pushd %ARTIFACT_PATH%
          echo %cd%
          dir %cd%

      - name: Make VHDX File (pwsh:2019)
        shell: pwsh
        if: >-
          ${{ github.event.inputs.hack == 'true' &&
              github.event.inputs.vs_year == '19' }}
        run: |
          $env:CHAIN = "VS2022"
          $OVM_OUT = "${env:ARTIFACT_PATH}\Ovmf${env:ARCH}\${env:TRGT}_${env:CHAIN}"
          if (Test-Path -path $OVM_OUT) {
            $EMU_OUT = "${env:ARTIFACT_PATH}\Emulator${env:ARCH}\${env:TRGT}_${env:CHAIN}\${env:ARCH}\Host"
            $VhdPath = "${OVM_OUT}\efi_disk.vhdx"
            $DirectorySizeBytes = (Get-ChildItem -Path "${EMU_OUT}\EFI" -Recurse | Measure-Object -Property Length -Sum).Sum
            $VhdSizeBytes = [math]::Ceiling($DirectorySizeBytes * 2 / 1048576 ) * 1048576
            $VhdSizeBytes = [math]::Max($VhdSizeBytes, 50 * 1048576)
            $VhdSizeMB = $VhdSizeBytes / 1048576
            $DrvLetter = 'V'
            $DiskPartScript = @("",
              "create vdisk file=$VhdPath maximum=$VhdSizeMB type=expandable",
              "select vdisk file=$VhdPath",
              "attach vdisk",
              "create partition primary",
              "format fs=fat quick",
              "assign letter=$DrvLetter",
              "exit",
            "") -join "`n"
            $DiskPartScript | diskpart
            Copy-Item -Path ${EMU_OUT}\EFI -Destination "${DrvLetter}:\" -Recurse -Force
            $DiskPartScript = ("",
              "select vdisk file=$VhdPath",
              "select volume=$DrvLetter",
              "remove letter=$DrvLetter",
              "detach vdisk",
              "exit",
            "") -join "`n"
            $DiskPartScript | diskpart
            $base = New-Object System.Uri("${env:ARTIFACT_PATH}\")
            $fullpath = New-Object System.Uri("${OVM_OUT}")
            $relpath = $base.MakeRelativeUri($fullpath).ToString() -replace '/', '\'
            $qemu_cmd = ("pushd ${relpath} && wsl qemu-system-x86_64 -m 4096" +
              " -drive if=pflash,format=raw,readonly=on,file=FV/OVMF_CODE.fd" +
              " -drive if=pflash,format=raw,file=FV/OVMF_VARS.fd" +
              " -drive file=efi_disk.vhdx,format=vhdx")
            Out-File -FilePath "${env:ARTIFACT_PATH}\wsl_emu.bat" -InputObject $qemu_cmd -Encoding ascii
            Write-Output "VHD created at $VhdPath"
          } else {
              Write-Output "${OVM_OUT} does not exist"
          }

      - name: Make VHDX File (pwsh:2022)
        shell: pwsh
        if: >-
          ${{ github.event.inputs.hack == 'true' &&
              github.event.inputs.vs_year == '22' }}
        run: |
          $env:CHAIN = "VS2022"
          $OVM_OUT = "${env:ARTIFACT_PATH}\Ovmf${env:ARCH}\${env:TRGT}_${env:CHAIN}"
          if (Test-Path -path $OVM_OUT) {
            $EMU_OUT = "${env:ARTIFACT_PATH}\Emulator${env:ARCH}\${env:TRGT}_${env:CHAIN}\${env:ARCH}\Host"
            $VhdPath = "${OVM_OUT}\efi_disk.vhdx"
            $DirectorySizeBytes = (Get-ChildItem -Path "${EMU_OUT}\EFI" -Recurse | Measure-Object -Property Length -Sum).Sum
            $VhdSizeBytes = [math]::Ceiling($DirectorySizeBytes * 2 / 1048576 ) * 1048576
            $VhdSizeBytes = [math]::Max($VhdSizeBytes, 50 * 1048576)
            $vhd_obj = New-VHD -Path $VhdPath -Dynamic -SizeBytes $VhdSizeBytes | Mount-VHD -Passthru
            $dsk_cim = $vhd_obj | Initialize-Disk -PartitionStyle MBR -Passthru
            $prt_cim = $dsk_cim | New-Partition -AssignDriveLetter -UseMaximumSize
            $prt_cim | Format-Volume -FileSystem FAT -Force
            $VhdDriveLetter = $prt_cim.DriveLetter
            Copy-Item -Path ${EMU_OUT}\EFI -Destination "${VhdDriveLetter}:\" -Recurse -Force
            Dismount-VHD -Path $VhdPath
            $base = New-Object System.Uri("${env:ARTIFACT_PATH}\")
            $fullpath = New-Object System.Uri("${OVM_OUT}")
            $relpath = $base.MakeRelativeUri($fullpath).ToString() -replace '/', '\'
            $qemu_cmd = ("pushd ${relpath} && wsl qemu-system-x86_64 -m 4096" +
              " -drive if=pflash,format=raw,readonly=on,file=FV/OVMF_CODE.fd" +
              " -drive if=pflash,format=raw,file=FV/OVMF_VARS.fd" +
              " -drive file=efi_disk.vhdx,format=vhdx")
            Out-File -FilePath "${env:ARTIFACT_PATH}\wsl_emu.bat" -InputObject $qemu_cmd -Encoding ascii
            Write-Output "VHD created at $VhdPath"
          } else {
              Write-Output "${OVM_OUT} does not exist"
          }


      # filename: .github/workflows/bld_cmd_ci_vs22.yml
      - name: Upload Artifact
        uses: actions/upload-artifact@v4
        with:
          name: >-
            debug-vs${{ github.event.inputs.vs_year
              }}-${{ github.event.inputs.architecture
              }}-${{ github.event.inputs.target
              }}-Py_${{ github.event.inputs.python_version
              }}-Hack_${{ github.event.inputs.hack }}
          path: ${{ env.ARTIFACT_PATH }}\**\*

